# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# !!!  After adopting device you need to update the wifi configuration  !!! #
# !!! and uncomment ssid and password to be able to upload new firmware !!! #
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
substitutions:
  name: rowi2-plug                # Device name used in ESPHome and on the network
  friendly_name: "Rowi2 Plug"     # Human-friendly device name for Home Assistant
  climate_update_interval: 10s    # Update interval for climate sensors (temperature, humidity, etc.)
  sensor_timeout_interval: 30s    # Timeout for climate sensors to return a valid reading
  energy_update_interval: 1s      # Update interval for energy sensors and overcurrent checks
  overcurrent_cutoff: '3'         # Number of consecutive energy_update_intervals the current must exceed the limit before overload cutoff

packages:

  remote_package:
     url: https://github.com/vt-vaio/rowi2
     ref: main
     files:
       - packages/core.yml
       - packages/climate.yml
       - packages/energy.yml
      #  - packages/ble-proxy.yml
       - packages/diagnostics.yml

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  on_boot:
    priority: 375
    then:
      # Run the script to refresh the LED status
      - script.execute: control_leds

      # If after 10 minutes, the device is still initializing (It did not yet connect to Home Assistant),
      # turn off the init_in_progress variable and run the script to refresh the LED status
      - delay: 10min
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: control_leds

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf

external_components:
  - source: github://pr#8158
    components: [bl0940]

# Enable logging
logger:

# Enable Home Assistant API
api:
  id: api_id
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: control_leds
  on_client_disconnected:
    - script.execute: control_leds

ota:
  - platform: esphome
    id: ota_esphome

wifi:
  id: wifi_id
  # uncomment ssid and password and add values to your secrets.yaml
  # ssid: !secret wifi_ssid
  # password: !secret wifi_password
  on_connect:
    - lambda: id(init_in_progress) = false;
    - script.execute: control_leds
  on_disconnect:
    - script.execute: control_leds

globals:
 # Global initialization variable. Initialized to true and set to false once everything is connected. Only used to have a smooth "plugging" experience
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  # Global variable storing the state of ImprovBLE. Used to draw different LED animations
  - id: improv_ble_in_progress
    type: bool
    restore_value: no
    initial_value: 'false'
  # Global variable storing if a factory reset was requested. If it is set to true, the device will factory reset once the center button is released
  - id: factory_reset_requested
    type: bool
    restore_value: no
    initial_value: 'false'
