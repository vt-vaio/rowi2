substitutions:
  energy_update_interval: 1s
  overcurrent_cutoff: 3 # Number of consecutive sensor update intervals the current must exceed the limit before overload cutoff

# Energy Meter Sensor Connection
uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 4800
  stop_bits: 1

button:
  - platform: bl0940
    name: "Cal  Reset"

number:
  - platform: bl0940
    current_calibration:
      id: current_calibration_ui
      name: "Cal Current"
      icon: mdi:screwdriver
    voltage_calibration:
      id: voltage_calibration_ui
      name: "Cal Voltage"
      icon: mdi:screwdriver
    power_calibration:
      id: power_calibration_ui
      name: "Cal Power"
      icon: mdi:screwdriver
      disabled_by_default: true
    energy_calibration:
      id: energy_calibration_ui
      name: "Cal Energy"
      icon: mdi:screwdriver
      disabled_by_default: true
  - platform: template
    id: max_current_a
    name: "Max Current"
    min_value: 1
    max_value: 10
    step: 0.1
    mode: box
    unit_of_measurement: A
    initial_value: 10.0
    restore_value: true
    optimistic: true
    icon: mdi:current-ac
    entity_category: config

sensor:
  - platform: bl0940
    id: rowi2
    uart_id: uart_bus
    legacy_mode: false
    resistor_one: 0.5118
    resistor_shunt: 1.045
    voltage:
      id: bl0940_voltage
      name: 'Voltage'
      accuracy_decimals: 1
    current:
      id: bl0940_current
      name: 'Current'
      accuracy_decimals: 3
    power:
      id: bl0940_power
      name: 'Power'
    energy:
      id: bl0940_energy
      name: 'Energy'
    internal_temperature:
      name: 'bl0940 Internal temperature'
      entity_category: diagnostic
    update_interval: '${energy_update_interval}'

globals:
  - id: overcurrent_counter
    type: int
    restore_value: no
    initial_value: '0'

interval:
  # This interval should match the sensor's update_interval for accurate overcurrent detection.
  - interval: ${energy_update_interval}
    then:
      - if:
          condition:
            lambda: 'return id(bl0940_current).state > id(max_current_a).state;'
          then:
            - lambda: |-
                id(overcurrent_counter) += 1;
            - if:
                condition:
                  lambda: 'return id(overcurrent_counter) >= ${overcurrent_cutoff};'
                then:
                  - switch.turn_off: relay
                  - logger.log:
                      format: "Overcurrent detected: current exceeded limit for ${overcurrent_cutoff} consecutive readings. Relay turned off."
                      level: WARN
                  - homeassistant.event:
                      event: esphome.rowi2_overcurrent
                      data:
                        reason: "Current exceeded safe limit for ${overcurrent_cutoff} consecutive readings"
                        value: !lambda 'return id(bl0940_current).state;'
                  - lambda: id(overcurrent_cutoff_detected) = true;
                  - script.execute: control_leds
          else:
            - lambda: |-
                id(overcurrent_counter) = 0;
