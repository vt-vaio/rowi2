name: Build and Publish ESPHome firmware

on:
  workflow_call:
    inputs:
      files:
        description: Comma-separated list of files to build.
        required: true
        type: string
      esphome_version:
        description: Version of ESPHome to build for.
        required: false
        type: string
        default: latest
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""
      combined-name:
        description: Combine all files into a single manifest under this name
        required: false
        type: string
        default: ""

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -Rcn 'inputs | . / ","')
          echo ::set-output name=files::$files
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi
          echo version=$version >> $GITHUB_OUTPUT
      - name: Generated random artifact prefix
        id: artifact-name
        run: |
          artifact_prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16; echo)
          echo artifact-prefix=$artifact_prefix >> $GITHUB_OUTPUT

  build:
    name: Build ESPHome binary for ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    # outputs:
    #   esphome-version: ${{ steps.esphome-build.outputs.esphome-version }}
    #   esphome-build-name: ${{ steps.esphome-build.outputs.name}}
    #   project-version: ${{ steps.esphome-build.outputs.project-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Build firmware
        uses: esphome/build-action@v6
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ inputs.esphome_version }}
          complete-manifest: true
      - name: Move files for versioning
        run: |
          mkdir -p output/${{ needs.prepare.outputs.version }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ needs.prepare.outputs.version }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ inputs.combined-name != '' && format('{0}-{1}', needs.prepare.outputs.artifact-prefix, steps.esphome-build.outputs.name) || steps.esphome-build.outputs.original-name }}
          path: output

  # publish:
  #   if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main'
  #   name: Publish new firmware and website to GitHub Pages
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - uses: actions/checkout@v3.5.3
  #     - uses: actions/download-artifact@v4
  #       with:
  #         path: output
  #         name: ${{ inputs.name }}

  #     - name: Create single manifest.json
  #       run: |
  #         jq -s '{"name": "${{ inputs.name }}", "version": "${{ needs.build.outputs.project-version }}", "home_assistant_domain": "esphome", "new_install_skip_erase": false, "builds":.}' output/*/manifest.json > output/${{ inputs.manifest_filename }}
  #         sed -i 's/${{ needs.build.outputs.esphome-build-name }}\//${{ inputs.directory_name }}\//g' output/${{ inputs.manifest_filename }}


  #     - run: cp -R static/* output

  #     - name: Deploy ðŸš€
  #       uses: JamesIves/github-pages-deploy-action@v4.6.3
  #       with:
  #         branch: gh-pages
  #         folder: output
  #         clean: ${{ inputs.clean }}
  #         force: false